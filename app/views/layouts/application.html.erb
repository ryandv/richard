<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= content_for?(:title) ? yield(:title) : "Richard" %></title>
    <%= csrf_meta_tags %>

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.6.1/html5shiv.js" type="text/javascript"></script>
    <![endif]-->

    <%= stylesheet_link_tag "application", :media => "all" %>

    <!-- For third-generation iPad with high-resolution Retina display: -->
    <!-- Size should be 144 x 144 pixels -->
    <%= favicon_link_tag 'apple-touch-icon-144x144-precomposed.png', :rel => 'apple-touch-icon-precomposed', :type => 'image/png', :sizes => '144x144' %>

    <!-- For iPhone with high-resolution Retina display: -->
    <!-- Size should be 114 x 114 pixels -->
    <%= favicon_link_tag 'apple-touch-icon-114x114-precomposed.png', :rel => 'apple-touch-icon-precomposed', :type => 'image/png', :sizes => '114x114' %>

    <!-- For first- and second-generation iPad: -->
    <!-- Size should be 72 x 72 pixels -->
    <%= favicon_link_tag 'apple-touch-icon-72x72-precomposed.png', :rel => 'apple-touch-icon-precomposed', :type => 'image/png', :sizes => '72x72' %>

    <!-- For non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->
    <!-- Size should be 57 x 57 pixels -->
    <%= favicon_link_tag 'apple-touch-icon-precomposed.png', :rel => 'apple-touch-icon-precomposed', :type => 'image/png' %>

    <!-- For all other devices -->
    <!-- Size should be 32 x 32 pixels -->
    <%= favicon_link_tag image_path('favicon.ico'), :rel => 'shortcut icon' %>


    <%= javascript_include_tag "application" %>
    <%= javascript_include_tag "countdown" %>

    <script>
      (function doPoll(data) {
        $.get('queue_transactions/pending_next')
        .done(function (data) {
          if (localStorage.getItem("next_in_line") == 'false' && data["next_in_line"] == true) {
            notifyMe();
          }
          localStorage.setItem("next_in_line", data["next_in_line"])
        })
        .always(function () {
          setTimeout(doPoll, 5000);
        });
      })();

      function notifyMe() {
        // Let's check if the browser supports notifications
        if (!("Notification" in window)) {
          alert("This browser does not support desktop notification");
        }
        // Let's check if the user is okay to get some notification
        else if (Notification.permission === "granted") {
            // If it's okay let's create a notification
            var notification = new Notification("Hey there. Just swinging by to let you know gorgon is free!\nxoxo, Richard", {icon: "<%= image_path('Richard-Gere.jpg') %>"});
          }
        // Otherwise, we need to ask the user for permission
        // Note, Chrome does not implement the permission static property
        // So we have to check for NOT 'denied' instead of 'default'
        else if (Notification.permission !== 'denied') {
          Notification.requestPermission(function (permission) {
                // Whatever the user answers, we make sure we store the information
                if(!('permission' in Notification)) {
                  Notification.permission = permission;
                }
                // If the user is okay, let's create a notification
                if (permission === "granted") {
                  var notification = new Notification("Gorgon is free!", {icon: "<%= image_path('Richard-Gere.jpg') %>"});
                }
              });
        }
        // At last, if the user already denied any notification, and you
        // want to be respectful there is no need to bother him any more.
      }


      // API Key Logic //
      var module = angular.module("Richard", []);

      // CSRF Issue //
      module.config(['$httpProvider', function($httpProvider) {
        var getToken = function() {
          // Rails 3+
          var el = document.querySelector('meta[name="csrf-token"]');
          if (el) {
            el = el.getAttribute('content');
          }
          return el;
        };

        var updateToken = function() {
          var headers = $httpProvider.defaults.headers.common, token = getToken();

          if (token) {
            headers['X-CSRF-TOKEN'] = getToken();
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }
        };

        updateToken();
      }]);

      module.controller("ApiKeyController", ["$scope", "$http", function ($scope, $http) {
        $scope.apiKey = "<%= current_user.try(:api_key) %>";

        $scope.resetApiKey = function () {
          $http.post('/user/reset_api_key.json').
            success(function(data, status, headers, config) {
              $scope.apiKey = data.apiKey;
            })
            .error(function(data, status, headers, config) {
              alert("Could not reset API Key");
            });
        };
      }]);
    </script>
  </head>
  <body ng-app="Richard">

    <div class="navbar navbar-fluid-top">
      <div class="navbar-inner">
        <div class="container-fluid">
          <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="#">Richard</a>
          <div class="container-fluid nav-collapse">
            <ul class="nav">
              <% if logged_in? %>
                <li class="user-info"><%= "Welcome, #{current_user.email}" %></li>
              <% else %>
                <li><%= link_to "Sign in", user_omniauth_authorize_path(:google_oauth2) %></li>
              <% end %>
            </ul>
            <ul class="nav pull-right">
              <% if logged_in? %>
                <li><a href="#api-config-modal" class="nav-link" data-toggle="modal">API Config <span class="icon icon-wrench" /></a></li>
                <li><%= link_to "Log out", destroy_user_session_path, class: 'nav-link', method: :delete %></li>
              <% end %>
            </ul>
          </div><!--/.nav-collapse -->
        </div><!--/.nav-collapse -->
      </div>
    </div>

    <div id="api-config-modal" class="modal hide fade" ng-controller="ApiKeyController as ctrl">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>API Key</h3>
      </div>
      <div class="modal-body">
        {{ apiKey }}
      </div>
      <div class="modal-footer">
        <div class="pull-left">
          <a ng-click="resetApiKey()" class="reset-api-key btn">
            <span class="icon icon-refresh" />
            Reset Key
          </a>
        </div>
      </div>
    </div>

    <div class="container-fluid">
      <div class="row-fluid">
        <% if current_user %>
        <div class="span2">
          <div class="well sidebar-nav">
            <ul class="nav nav-list actions">
              <li style="padding-bottom: 6px; padding-left: 5px">
                Estimated wait:
              </li>
              <center>
              <script>
                  var myCountdown1 = new Countdown({time:<%= Metrics::wait_time(current_user) %>, rangeHi:"minutes", height:70, width:135});
              </script>
              </center>
              <br>
              <%= action_buttons %>
              <%= force_release_button %>

            </ul>
          </div><!--/.well -->
        </div><!--/span-->
        <% end %>

        <div class="span9">
          <%= bootstrap_flash %>
        </div>
        <div ng-view class="span9">
          <% if logged_in? %>
            <%= yield %>
          <% end %>
        </div>
      </div><!--/row-->

      <footer>
        <p>&copy; Nulogy Corporation 2014</p>
      </footer>
    </div> <!-- /container -->
  </body>
</html>
